{"version":3,"sources":["common.ts"],"names":["Tesp","Tesp.Vec2","Tesp.Vec2.constructor","Tesp.Vec2.distance","Tesp.Vec2.fromCell","Tesp.Node","Tesp.Node.constructor","Tesp.Edge","Tesp.Edge.constructor","Tesp.Cell","Tesp.Cell.fromPosition","Tesp.CellRow","Tesp.CellRow.constructor","Tesp.Area","Tesp.Area.constructor","Tesp.Area.containsCell"],"mappings":"AAAA,GAAOA,OAAP,SAAOA,MAMHA,GAAAA,MAAAA,WACIC,QAAAA,MAAmBA,EAAsBA,GAA7BC,SAAAA,IAAAA,EAAAA,GAAsBA,SAAAA,IAAAA,EAAAA,GAAfA,KAAAA,EAAAA,EAAsBA,KAAAA,EAAAA,EAW7CD,MARWA,MAAAA,SAAPA,SAAgBA,IAAYA,KACxBE,MAAOA,MAAKA,MAAOA,IAAIA,EAAIA,IAAIA,IAAMA,IAAIA,EAAIA,IAAIA,IAAQA,IAAIA,EAAIA,IAAIA,IAAMA,IAAIA,EAAIA,IAAIA,KAIpFF,KAAAA,SAAPA,SAAgBA,EAAWA,GACvBG,MAAOA,IAAIA,MAAKA,EAAIA,KAAKA,MAAQA,KAAKA,YAAaA,EAAIA,KAAKA,OAASA,KAAKA,eAElFH,OAZaD,MAAAA,KAAIA,IAyBjBA,IAAAA,MAAAA,WAQIK,QAAAA,MAAmBA,KAAqBA,SAAyBA,IAAmBA,KAAqBA,WAAPC,SAAAA,YAAAA,WAAAA,GAA/EA,KAAAA,KAAAA,KAAqBA,KAAAA,SAAAA,SAAyBA,KAAAA,IAAAA,IAAmBA,KAAAA,KAAAA,KAAqBA,KAAAA,UAAAA,UACrGA,KAAKA,GAAKA,KAAKA,WACfA,KAAKA,SAEbD,MALmBA,MAAAA,SAAmBA,EAKtCA,OAZaL,MAAAA,KAAIA,IAejBA,IAAAA,MAAAA,WACIO,QAAAA,MAAmBA,QAAsBA,SAAuBA,MAA7CC,KAAAA,QAAAA,QAAsBA,KAAAA,SAAAA,SAAuBA,KAAAA,KAAAA,KACpED,MAAAA,QAFaP,MAAAA,KAAIA,IAKjBA,IAAAA,MAAAA,WAAAS,QAAAA,SAQAA,MAHWA,MAAAA,aAAPA,SAAoBA,KAChBC,MAAOA,IAAIA,OAAMA,IAAIA,EAAIA,KAAKA,aAAeA,KAAKA,OAAQA,IAAIA,EAAIA,KAAKA,cAAgBA,KAAKA,SALzFD,KAAAA,MAAgBA,KAChBA,KAAAA,OAAiBA,KACjBA,KAAAA,YAAsBA,GACtBA,KAAAA,aAAuBA,GAIlCA,OARaT,MAAAA,KAAIA,IAiBjBA,IAAAA,SAAAA,WAGIW,QAAAA,SAAmBA,EAAkBA,GAAmBA,IAArCC,KAAAA,EAAAA,EAAkBA,KAAAA,GAAAA,GAAmBA,KAAAA,GAAAA,GACpDA,KAAKA,MAAQA,GAAKA,GAAKA,EAE/BD,MAAAA,WANaX,MAAAA,QAAOA,OAepBA,IAAAA,MAAAA,WAIIa,QAAAA,MAAmBA,OAAqBA,MAArBC,KAAAA,OAAAA,OAAqBA,KAAAA,KAAAA,KACpCA,KAAKA,KAAOA,KAAKA,GAAGA,EACpBA,KAAKA,KAAOA,KAAKA,KAAKA,OAASA,GAAGA,EAc1CD,MAVIA,MAAAA,UAAAA,aAAAA,SAAaA,KACTE,MAAOA,MAAKA,aAAaA,KAAMA,MAE5BF,KAAAA,aAAPA,SAAoBA,KAAaA,KAC7BE,GAAIA,IAAIA,GAAKA,KAAKA,MAAQA,IAAIA,EAAIA,KAAKA,KAAOA,EAAGA,CAC7CA,GAAIA,KAAMA,KAAKA,KAAKA,KAAKA,MAAMA,IAAIA,GAAKA,KAAKA,KAC7CA,OAAOA,KAAIA,GAAKA,IAAIA,IAAMA,IAAIA,EAAIA,IAAIA,GAAKA,EAE/CA,OAAOA,GAEfF,OApBab,MAAAA,KAAIA,MAnFdA,OAAAA","file":"common.js","sourcesContent":["module Tesp {\r\n    export interface IVec2 {\r\n        x: number;\r\n        y: number;\r\n    }\r\n    /** 2-dimensional floating point vector */\r\n    export class Vec2 implements IVec2 {\r\n        constructor(public x: number = 0, public y: number = 0) { }\r\n\r\n        /** Calculate the euclidean distance between this vector and another */\r\n        static distance(src: IVec2, dst: IVec2) {\r\n            return Math.sqrt(((dst.x - src.x) * (dst.x - src.x)) + ((dst.y - src.y) * (dst.y - src.y)));\r\n        }\r\n\r\n        /** Calculate the top-left corner of a cell as a position vector */\r\n        static fromCell(x: number, y: number): Vec2 {\r\n            return new Vec2(x * Cell.width + Cell.widthOffset, y * Cell.height + Cell.heightOffset);\r\n        }\r\n    }\r\n\r\n    export interface INode {\r\n        id: number;\r\n        referenceId: number;\r\n        edges: Edge[];\r\n        name: string;\r\n        longName: string;\r\n        pos: IVec2;\r\n        type: string;\r\n        permanent: boolean;\r\n    }\r\n    /** A single significant point in the world */\r\n    export class Node implements INode {\r\n        /** Globally unique identifier for this node */\r\n        id: number;\r\n        /** The id of a node this node was created on */\r\n        referenceId: number;\r\n        edges: Edge[];\r\n\r\n        private static identity: number = 1;\r\n        constructor(public name: string, public longName: string, public pos: IVec2, public type: string, public permanent: boolean = false) {\r\n            this.id = Node.identity++;\r\n            this.edges = [];\r\n        }\r\n    }\r\n\r\n    /** A link between two nodes */\r\n    export class Edge {\r\n        constructor(public srcNode: Node, public destNode: Node, public cost: number) { }\r\n    }\r\n\r\n    /** A large area in the world */\r\n    export class Cell {\r\n        static width: number = 44.5;\r\n        static height: number = 44.6;\r\n        static widthOffset: number = 12;\r\n        static heightOffset: number = 35;\r\n        static fromPosition(pos: IVec2): Vec2 {\r\n            return new Vec2((pos.x - Cell.widthOffset) / Cell.width, (pos.y - Cell.heightOffset) / Cell.height);\r\n        }\r\n    }\r\n\r\n    export interface ICellRow {\r\n        y: number;\r\n        x1: number;\r\n        x2: number;\r\n        width: number;\r\n    }\r\n    /** A single row of cells */\r\n    export class CellRow {\r\n        width: number;\r\n\r\n        constructor(public y: number, public x1: number, public x2: number) {\r\n            this.width = x2 - x1 + 1;\r\n        }\r\n    }\r\n\r\n    export interface IArea {\r\n        target: INode;\r\n        rows: ICellRow[];\r\n        minY: number;\r\n        maxY: number;\r\n    }\r\n    /** An area of one or more cells */\r\n    export class Area implements IArea {\r\n        minY: number;\r\n        maxY: number;\r\n\r\n        constructor(public target: Node, public rows: ICellRow[]) {\r\n            this.minY = rows[0].y;\r\n            this.maxY = rows[rows.length - 1].y;\r\n        }\r\n\r\n        /** Check if this cell contains the supplied coordinates */\r\n        containsCell(pos: IVec2): boolean {\r\n            return Area.containsCell(this, pos);\r\n        }\r\n        static containsCell(area: IArea, pos: IVec2) {\r\n            if (pos.y >= area.minY && pos.y < area.maxY + 1) {\r\n                var row = area.rows[Math.floor(pos.y) - area.minY];\r\n                return pos.x >= row.x1 && pos.x < row.x2 + 1;\r\n            }\r\n            return false;\r\n        }\r\n    }\r\n}"],"sourceRoot":"../ts"}