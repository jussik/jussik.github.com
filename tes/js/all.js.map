{"version":3,"sources":["../ts/app.ts","../ts/common.ts","../ts/context.ts","../ts/contextmenu.ts","../ts/controls.ts","ts.js","../ts/features.ts","../ts/map.ts","../ts/menu.ts","../ts/path.ts","../ts/world.ts"],"names":["Tesp","Tesp.ChangeReason","Tesp.ChangeListener","Tesp.ChangeListener.constructor","Tesp.ChangeListener.trigger","Tesp.Application","Tesp.Application.constructor","Tesp.Application.addChangeListener","Tesp.Application.removeChangeListener","Tesp.Application.triggerChange","Tesp.Application.toggleBodyClass","Tesp.Vec2","Tesp.Vec2.constructor","Tesp.Vec2.distance","Tesp.Vec2.fromCell","Tesp.Node","Tesp.Node.constructor","Tesp.Edge","Tesp.Edge.constructor","Tesp.Cell","Tesp.Cell.fromPosition","Tesp.CellRow","Tesp.CellRow.constructor","Tesp.Area","Tesp.Area.constructor","Tesp.Area.containsCell","Tesp.Context","Tesp.Context.constructor","Tesp.Context.setContextLocation","Tesp.Context.setContextNode","Tesp.Context.clearContext","Tesp.Context.findPath","Tesp.ContextMenu","Tesp.ContextMenu.constructor","Tesp.ContextMenu.setContext","Tesp.ContextMenu.openNode","Tesp.ContextMenu.open","Tesp.ContextMenu.hide","Tesp.Controls","Tesp.Controls.constructor","Tesp.Controls.initSearch","Tesp.Controls.initSearch.prepTerm","Tesp.Controls.clearSearch","Tesp.Controls.updateNodeInfo","Tesp.Controls.updatePath","Tesp.Controls.drawPathNode","Tesp.Controls.drawFeatures","Tesp.Controls.drawCheckbox","Tesp.Feature","Tesp.Features","Tesp.Features.init","Tesp.Map","Tesp.Map.constructor","Tesp.Map.getEventNode","Tesp.Map.triggerContextMenu","Tesp.Map.initDragScroll","Tesp.Map.renderNodes","Tesp.Map.drawCellEdge","Tesp.Map.renderPath","Tesp.Map.renderMark","Tesp.Map.renderSource","Tesp.Map.renderDestination","Tesp.Map.addOrUpdateNodeElem","Tesp.Map.renderGrid","Tesp.Map.updateFeatures","Tesp.Map.drawNode","Tesp.Map.drawEdge","Tesp.MenuItem","Tesp.MenuItem.constructor","Tesp.Menu","Tesp.Menu.constructor","Tesp.Menu.dispose","Tesp.Menu.getStyle","Tesp.Menu.setData","Tesp.Menu.open","Tesp.Menu.hide","Tesp.PathEdge","Tesp.PathEdge.constructor","Tesp.PathNode","Tesp.PathNode.constructor","Tesp.Path","Tesp.Path.findPath","Tesp.World","Tesp.World.constructor","Tesp.World.loadTransport","Tesp.World.makeArea","Tesp.World.findNodeById","Tesp.World.getRegionName","Tesp.World.getLandmarkName","Tesp.World.getAreaByCell"],"mappings":"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","file":"all.js","sourcesContent":["/// <reference path=\"d/es6-promise/es6-promise.d.ts\"/>\r\n/// <reference path=\"d/whatwg-fetch/whatwg-fetch.d.ts\"/>\r\nmodule Tesp {\r\n    export type ChangeListenerFunc = (reason: ChangeReason) => void;\r\n    export enum ChangeReason {\r\n        None = 0x0,\r\n        /** The selected source node has changed */\r\n        SourceChange = 0x1,\r\n        /** The selected destination node has changed */\r\n        DestinationChange = 0x2,\r\n        /** The mark node location has changed */\r\n        MarkChange = 0x4,\r\n        /** The either the source, destination or mark location has changed */\r\n        ContextChange = SourceChange | DestinationChange | MarkChange,\r\n        /** The enabled state or visibility of a feature has changed */\r\n        FeatureChange = 0x8,\r\n        /** A new path has been calculated */\r\n        PathUpdate = 0x10,\r\n        /** An input event has triggered menus to close */\r\n        ClearMenus = 0x20,\r\n        Any = 0x3f\r\n    }\r\n    export class ChangeListener {\r\n        constructor(public reasons: ChangeReason, public func: ChangeListenerFunc) { }\r\n\r\n        trigger(reason: ChangeReason) {\r\n            if ((this.reasons & reason) !== 0)\r\n                this.func(reason);\r\n        }\r\n    }\r\n\r\n    /** Core TESPathfinder application */\r\n    export class Application {\r\n        loaded: Promise<Application>;\r\n        element: HTMLElement;\r\n        context: Context;\r\n        features: IFeatureList;\r\n        world: World;\r\n        controls: Controls;\r\n        map: Map;\r\n        ctxMenu: ContextMenu;\r\n\r\n        private listeners: ChangeListener[] = [];\r\n\r\n        constructor() {\r\n            this.element = document.body;\r\n            this.loaded = window.fetch(\"data/data.json\")\r\n                .then(res => res.json())\r\n                .then(data => {\r\n                    this.context = new Context(this);\r\n                    this.features = Features.init();\r\n                    this.world = new World(this, <IWorldSource><any>data);\r\n                    this.map = new Map(this, document.getElementById(\"map\"));\r\n                    this.controls = new Controls(this, document.getElementById(\"controls\"));\r\n                    this.ctxMenu = new ContextMenu(this);\r\n\r\n                    document.body.onmousedown = document.body.oncontextmenu = () => this.triggerChange(ChangeReason.ClearMenus);\r\n                    this.toggleBodyClass(\"loading\", false);\r\n                    return this;\r\n                });\r\n        }\r\n\r\n        /** Listen for application level changes */\r\n        addChangeListener(reasons: ChangeReason, func: ChangeListenerFunc): ChangeListener {\r\n            var listener = new ChangeListener(reasons, func);\r\n            this.listeners.push(listener);\r\n            return listener;\r\n        }\r\n        /** Remove a previously added listener */\r\n        removeChangeListener(listener: ChangeListener) {\r\n            var ix = this.listeners.indexOf(listener);\r\n            if (ix > -1)\r\n                this.listeners.splice(ix, 1);\r\n        }\r\n        /** Inform all listeners about a new change */\r\n        triggerChange(reason: ChangeReason) {\r\n            this.listeners.forEach(l => l.trigger(reason));\r\n        }\r\n\r\n        /** Toggle a class attribute name in the document body */\r\n        toggleBodyClass(name: string, enabled: boolean) {\r\n            if (enabled) {\r\n                document.body.classList.add(name);\r\n            } else {\r\n                document.body.classList.remove(name);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** The current instance of the application, for debugging purposes only */\r\n    export var app = new Application();\r\n}","module Tesp {\r\n    /** 2-dimensional floating point vector */\r\n    export class Vec2 {\r\n        constructor(public x: number, public y: number) { }\r\n\r\n        /** Calculate the euclidean distance between this vector and another */\r\n        distance(other: Vec2): number {\r\n            return Math.sqrt(((other.x - this.x) * (other.x - this.x)) + ((other.y - this.y) * (other.y - this.y)));\r\n        }\r\n\r\n        /** Calculate the top-left corner of a cell as a position vector */\r\n        static fromCell(x: number, y: number): Vec2 {\r\n            return new Vec2(x * Cell.width + Cell.widthOffset, y * Cell.height + Cell.heightOffset);\r\n        }\r\n    }\r\n\r\n    /** A single significant point in the world */\r\n    export class Node {\r\n        /** Globally unique identifier for this node */\r\n        id: number;\r\n        /** The id of a node this node was created on */\r\n        referenceId: number;\r\n        edges: Edge[];\r\n\r\n        private static identity: number = 1;\r\n        constructor(public name: string, public longName: string, public pos: Vec2, public type: string, public permanent: boolean = false) {\r\n            this.id = Node.identity++;\r\n            this.edges = [];\r\n        }\r\n    }\r\n\r\n    /** A link between two nodes */\r\n    export class Edge {\r\n        constructor(public srcNode: Node, public destNode: Node, public cost: number) { }\r\n    }\r\n\r\n    /** A large area in the world */\r\n    export class Cell {\r\n        static width: number = 44.5;\r\n        static height: number = 44.6;\r\n        static widthOffset: number = 20;\r\n        static heightOffset: number = 35;\r\n        static fromPosition(pos: Vec2): Vec2 {\r\n            return new Vec2((pos.x - Cell.widthOffset) / Cell.width, (pos.y - Cell.heightOffset) / Cell.height);\r\n        }\r\n    }\r\n    /** A single row of cells */\r\n    export class CellRow {\r\n        width: number;\r\n\r\n        constructor(public y: number, public x1: number, public x2: number) {\r\n            this.width = x2 - x1 + 1;\r\n        }\r\n    }\r\n    /** An area of one or more cells */\r\n    export class Area {\r\n        private minY: number;\r\n        private maxY: number;\r\n\r\n        constructor(public target: Node, public rows: CellRow[]) {\r\n            this.minY = rows[0].y;\r\n            this.maxY = rows[rows.length - 1].y;\r\n        }\r\n\r\n        /** Check if this cell contains the supplied coordinates */\r\n        containsCell(pos: Vec2): boolean {\r\n            if (pos.y >= this.minY && pos.y < this.maxY + 1) {\r\n                var row = this.rows[Math.floor(pos.y) - this.minY];\r\n                return pos.x >= row.x1 && pos.x < row.x2 + 1;\r\n            }\r\n            return false;\r\n        }\r\n    }\r\n}","module Tesp {\r\n    /** The current mutable state of the application */\r\n    export class Context {\r\n        sourceNode: Node;\r\n        destNode: Node;\r\n        markNode: Node;\r\n        pathEnd: PathNode;\r\n\r\n        constructor(private app: Application) {\r\n            this.app.addChangeListener(ChangeReason.ContextChange | ChangeReason.MarkChange | ChangeReason.FeatureChange, reason => {\r\n                this.findPath();\r\n                if (reason === ChangeReason.MarkChange) {\r\n                    this.app.toggleBodyClass(\"has-mark\", this.markNode != null);\r\n                }\r\n            });\r\n        }\r\n\r\n        setContextLocation(context: string, pos: Vec2) {\r\n            var name = this.app.world.getLandmarkName(pos) || this.app.world.getRegionName(pos);\r\n            if (context === \"source\") {\r\n                name = name || \"You\";\r\n                this.setContextNode(context, new Node(name, name, pos, \"source\"));\r\n            } else if (context === \"destination\") {\r\n                name = name || \"Your destination\";\r\n                this.setContextNode(context, new Node(name, name, pos, \"destination\"));\r\n            } else if (context === \"mark\") {\r\n                this.markNode = new Node(name, name, pos, \"mark\");\r\n                this.app.triggerChange(ChangeReason.MarkChange);\r\n            }\r\n        }\r\n        setContextNode(context: string, node: Node) {\r\n            if (context === \"source\") {\r\n                this.sourceNode = node;\r\n                this.app.triggerChange(ChangeReason.SourceChange);\r\n            } else if (context === \"destination\") {\r\n                this.destNode = node;\r\n                this.app.triggerChange(ChangeReason.DestinationChange);\r\n            } else if (context === \"mark\") {\r\n                var pos = node.pos;\r\n                this.markNode = new Node(node.longName, node.longName, pos, \"mark\");\r\n                this.markNode.referenceId = node.referenceId || node.id;\r\n                this.app.triggerChange(ChangeReason.MarkChange);\r\n            }\r\n        }\r\n        clearContext(context: string) {\r\n            if (context === \"source\") {\r\n                this.sourceNode = null;\r\n                this.app.triggerChange(ChangeReason.SourceChange);\r\n            } else if (context === \"destination\") {\r\n                this.destNode = null;\r\n                this.app.triggerChange(ChangeReason.DestinationChange);\r\n            } else if (context === \"mark\") {\r\n                this.markNode = null;\r\n                this.app.triggerChange(ChangeReason.MarkChange);\r\n            }\r\n        }\r\n\r\n        findPath() {\r\n            this.pathEnd = this.sourceNode != null && this.destNode != null && this.sourceNode !== this.destNode\r\n                ? Path.findPath(this.app)\r\n                : null;\r\n            this.app.triggerChange(ChangeReason.PathUpdate);\r\n        }\r\n    }\r\n}","module Tesp {\r\n    /** Manages the context menu of the map */\r\n    export class ContextMenu {\r\n        private menu: Menu;\r\n        private links: MenuItem[];\r\n        private unmarkLink: MenuItem;\r\n\r\n        private pos: Vec2;\r\n        private node: Node;\r\n\r\n        constructor(private app: Application) {\r\n            this.menu = new Menu(app, false);\r\n\r\n            this.links = [\r\n                MenuItem.separator,\r\n                new MenuItem(\"Navigate from here\", () => this.setContext(\"source\")),\r\n                new MenuItem(\"Navigate to here\", () => this.setContext(\"destination\")),\r\n                new MenuItem(\"Set Mark here\", () => this.setContext(\"mark\"))\r\n            ];\r\n            this.unmarkLink = new MenuItem(\"Remove mark\", () => this.app.context.clearContext(\"mark\"));\r\n        }\r\n\r\n        private setContext(context: string) {\r\n            if (this.node != null) {\r\n                this.app.context.setContextNode(context, this.node);\r\n            } else {\r\n                this.app.context.setContextLocation(context, this.pos);\r\n            }\r\n        }\r\n\r\n        openNode(node: Node) {\r\n            this.open(node.pos, node);\r\n        }\r\n        open(pos: Vec2, node: Node) {\r\n            // remove node if neither it or its reference are permanent\r\n            if (node != null && !node.permanent) {\r\n                if (node.referenceId == null) {\r\n                    node = null;\r\n                } else {\r\n                    node = this.app.world.findNodeById(node.referenceId);\r\n                    if (node != null && !node.permanent) {\r\n                        node = null;\r\n                    }\r\n                }\r\n            }\r\n\r\n            var lines: string[] = [];\r\n            var landmark = this.app.world.getLandmarkName(pos);\r\n            if (node != null) {\r\n                var feat = this.app.features.byName[node.type];\r\n                if (feat != null) {\r\n                    lines.push(feat.location || feat.name);\r\n                    lines.push(node.name);\r\n                } else {\r\n                    lines.push(node.longName);\r\n                }\r\n                if (landmark != null && landmark !== node.name) {\r\n                    lines.push(landmark);\r\n                }\r\n                pos = node.pos;\r\n            } else if (landmark != null) {\r\n                lines.push(landmark);\r\n            }\r\n            var region = this.app.world.getRegionName(pos);\r\n            if (region != null) {\r\n                lines.push(region + \" Region\");\r\n            }\r\n\r\n            this.pos = pos;\r\n            this.node = node;\r\n\r\n            var items = lines.map(l => new MenuItem(l)).concat(this.links);\r\n            if (this.app.context.markNode != null)\r\n                items.push(this.unmarkLink);\r\n            this.menu.setData(items);\r\n            this.menu.open();\r\n\r\n            var menuStyle = this.menu.getStyle();\r\n            menuStyle.left = pos.x + \"px\";\r\n            menuStyle.top = pos.y + \"px\";\r\n\r\n            var scrollX = pageXOffset;\r\n            var scrollY = pageYOffset;\r\n            var rect = this.menu.element.getBoundingClientRect();\r\n            if (rect.left < 10) {\r\n                scrollX = pageXOffset + rect.left - 10;\r\n            } else if (rect.right > innerWidth - 27) {\r\n                scrollX = pageXOffset + rect.right - innerWidth + 27;\r\n            }\r\n\r\n            if (rect.top < 50) {\r\n                scrollY = pageYOffset + rect.top - 50;\r\n            } else if (rect.bottom > innerHeight - 27) {\r\n                scrollY = pageYOffset + rect.bottom - innerHeight + 27;\r\n            }\r\n\r\n            if (scrollX !== pageXOffset || scrollY !== pageYOffset)\r\n                scroll(scrollX, scrollY);\r\n        }\r\n        hide() {\r\n            this.menu.hide();\r\n        }\r\n    }\r\n}","module Tesp {\r\n    /** UI controls for search and navigation */\r\n    export class Controls {\r\n        private pathContainer: HTMLElement;\r\n        private featuresContainer: HTMLElement;\r\n        private searchInput: HTMLInputElement;\r\n        private searchBox: HTMLElement;\r\n        private searchMenu: Menu;\r\n\r\n        constructor(private app: Application, private element: HTMLElement) {\r\n            this.app.addChangeListener(ChangeReason.SourceChange, () => this.updateNodeInfo(\".control-source-info\", this.app.context.sourceNode));\r\n            this.app.addChangeListener(ChangeReason.DestinationChange, () => this.updateNodeInfo(\".control-destination-info\", this.app.context.destNode));\r\n            this.app.addChangeListener(ChangeReason.MarkChange, () => this.updateNodeInfo(\".control-mark-info\", this.app.context.markNode));\r\n            this.app.addChangeListener(ChangeReason.PathUpdate, () => this.updatePath());\r\n\r\n            this.pathContainer = <HTMLElement>element.querySelector(\".path-container\");\r\n            this.featuresContainer = <HTMLElement>element.querySelector(\".features-container\");\r\n            this.searchInput = <HTMLInputElement>element.querySelector(\".search-input\");\r\n\r\n            var featuresVisible = false;\r\n            (<HTMLElement>element.querySelector(\".features-icon\")).onclick = () => \r\n                this.featuresContainer.style.display = (featuresVisible = !featuresVisible) ? \"block\" : \"none\";\r\n\r\n            this.initSearch();\r\n        }\r\n\r\n        initSearch() {\r\n            var searchContainer = <HTMLInputElement>this.element.querySelector(\".search-container\");\r\n            this.searchMenu = new Menu(app, true);\r\n            var menuStyle = this.searchMenu.getStyle();\r\n            var input = this.searchInput.getBoundingClientRect();\r\n            menuStyle.minWidth = \"200px\";\r\n            menuStyle.top = (input.top + input.height) + \"px\";\r\n            menuStyle.right = (searchContainer.clientWidth - input.right) + \"px\";\r\n\r\n            function prepTerm(text: string) {\r\n                return text != null ? text.toLowerCase().replace(/[^a-z]+/g, \" \") : null;\r\n            }\r\n\r\n            var searchNodes = this.app.world.nodes\r\n                .concat(this.app.world.landmarks.map(a => a.target))\r\n                .map(n => {\r\n                    var feat = this.app.features.byName[n.type];\r\n                    var featName = feat != null ? feat.location || feat.name : null;\r\n                    var terms = [n.name];\r\n                    if (featName != null)\r\n                        terms.push(featName);\r\n                    var landmark = this.app.world.getLandmarkName(n.pos);\r\n                    if (landmark && landmark !== n.name)\r\n                        terms.push(landmark);\r\n\r\n                    return {\r\n                        terms: terms,\r\n                        searchTerms: terms.map(t => prepTerm(t)),\r\n                        node: n\r\n                    };\r\n                })\r\n                .sort((a, b) => {\r\n                    var at = a.searchTerms, bt = b.searchTerms;\r\n                    var ml = Math.max(at.length, bt.length);\r\n                    for (var i = 0; i < ml; i++) {\r\n                        var d = (at[i] || \"\").localeCompare(bt[i] || \"\");\r\n                        if (d !== 0)\r\n                            return d;\r\n                    }\r\n                    return 0;\r\n                });\r\n\r\n            this.drawFeatures();\r\n\r\n            this.searchInput.oninput = () => {\r\n                var search = this.searchInput.value.toLowerCase();\r\n\r\n                var starts: number[] = [];\r\n                var terms: string[] = [];\r\n                var alpha = false;\r\n                for (var i = 0; i < search.length; i++) {\r\n                    var c = search.charCodeAt(i);\r\n                    if (c > 96 && c < 123) {\r\n                        if (!alpha) {\r\n                            starts.push(i);\r\n                            alpha = true;\r\n                        }\r\n                    } else if (alpha) {\r\n                        terms = terms.concat(starts.map(s => search.substring(s, i)));\r\n                        alpha = false;\r\n                    }\r\n                }\r\n                if (alpha) {\r\n                    terms = terms.concat(starts.map(s => search.substring(s)));\r\n                }\r\n\r\n                var results = searchNodes\r\n                    .filter(n => {\r\n                        var c = 0;\r\n                        return terms.some(t => {\r\n                            if (n.searchTerms.some(st => st.indexOf(t) === 0))\r\n                                c++;\r\n                            return c >= starts.length;\r\n                        });\r\n                    });\r\n\r\n                this.searchMenu.setData(results.map(n =>\r\n                    new MenuItem(n.terms.join(\", \"), () => {\r\n                        this.app.ctxMenu.openNode(n.node);\r\n                        this.clearSearch();\r\n                    })));\r\n                this.searchMenu.open();\r\n            }\r\n\r\n            this.app.addChangeListener(ChangeReason.ClearMenus, () => {\r\n                if (document.activeElement !== this.searchInput)\r\n                    this.clearSearch();\r\n            });\r\n        }\r\n        clearSearch() {\r\n            this.searchInput.value = \"\";\r\n            this.searchMenu.hide();\r\n        }\r\n\r\n        private updateNodeInfo(selector: string, node: Node) {\r\n            var el = <HTMLElement>this.element.querySelector(selector);\r\n            if (node != null) {\r\n                el.textContent = node.longName;\r\n                el.onclick = () => this.app.ctxMenu.openNode(node);\r\n            } else {\r\n                el.textContent = \"\";\r\n                el.onclick = null;\r\n            }\r\n        }\r\n\r\n        private updatePath() {\r\n            var child: Element;\r\n            while ((child = this.pathContainer.firstElementChild)) {\r\n                this.pathContainer.removeChild(child);\r\n            }\r\n\r\n            var pathNode: PathNode = this.app.context.pathEnd;\r\n            this.pathContainer.style.display = pathNode ? \"block\" : \"none\";\r\n            while (pathNode) {\r\n                this.pathContainer.insertBefore(this.drawPathNode(pathNode), this.pathContainer.firstElementChild);\r\n                pathNode = pathNode.prev;\r\n            }\r\n\r\n        }\r\n\r\n        private drawPathNode(pathNode: PathNode): HTMLElement {\r\n            var el = document.createElement(\"div\");\r\n\r\n            var icon: string, text: string, linkText: string;\r\n            var node = pathNode.node;\r\n            var edge = pathNode.prevEdge;\r\n            if (edge) {\r\n                var action: string;\r\n                if (edge.type === \"walk\") {\r\n                    action = \"Walk\";\r\n                    icon = \"compass\";\r\n                } else {\r\n                    var feat = this.app.features.byName[edge.type];\r\n                    if (feat) {\r\n                        action = feat.verb || feat.name;\r\n                        icon = feat.icon;\r\n                    } else {\r\n                        action = edge.type;\r\n                        icon = \"question\";\r\n                    }\r\n                }\r\n\r\n                text = ` ${action} to `;\r\n                linkText = node.type === edge.type ? node.name : node.longName;\r\n            } else {\r\n                icon = \"map-marker\";\r\n                text = \" \";\r\n                linkText = node.longName;\r\n            }\r\n\r\n            var i = document.createElement(\"i\");\r\n            i.classList.add(\"path-icon\");\r\n            i.classList.add(\"fa\");\r\n            i.classList.add(\"fa-\" + icon);\r\n            el.appendChild(i);\r\n\r\n            el.appendChild(document.createTextNode(text));\r\n\r\n            var a = document.createElement(\"a\");\r\n            a.textContent = linkText;\r\n            a.onclick = () => this.app.ctxMenu.openNode(node);\r\n            el.appendChild(a);\r\n\r\n            return el;\r\n        }\r\n\r\n        private drawFeatures() {\r\n            this.app.features.forEach(f => {\r\n                var el = document.createElement(\"div\");\r\n                el.className = \"feature-row\";\r\n                el.textContent = f.name + \":\";\r\n\r\n                var container = document.createElement(\"div\");\r\n                container.className = \"feature-toggle-container\";\r\n                el.appendChild(container);\r\n\r\n                container.appendChild(this.drawCheckbox(val => {\r\n                    f.hidden = !val;\r\n                    this.app.triggerChange(ChangeReason.FeatureChange);\r\n                }, !f.hidden, \"fa-eye\", \"fa-eye-slash\"));\r\n                if (!f.visualOnly) {\r\n                    container.appendChild(this.drawCheckbox(val => {\r\n                        f.disabled = !val;\r\n                        this.app.triggerChange(ChangeReason.FeatureChange);\r\n                    }, !f.disabled, \"fa-check-circle-o\", \"fa-circle-o\"));\r\n                } else {\r\n                    var i = document.createElement(\"i\");\r\n                    i.className = \"fa fa-icon fa-circle-o feature-toggle hidden\";\r\n                    container.appendChild(i);\r\n                }\r\n\r\n                this.featuresContainer.appendChild(el);\r\n            });\r\n        }\r\n\r\n        private drawCheckbox(onchange: (value: boolean) => void, initial: boolean, classOn: string, classOff: string): HTMLElement {\r\n            var checked = initial;\r\n            var i = document.createElement(\"i\");\r\n            i.className = \"fa fa-icon feature-toggle\";\r\n            i.classList.add(checked ? classOn : classOff);\r\n            i.onclick = ev => {\r\n                ev.stopPropagation();\r\n                checked = !checked;\r\n                if (checked) {\r\n                    i.classList.remove(classOff);\r\n                    i.classList.add(classOn);\r\n                } else {\r\n                    i.classList.remove(classOn);\r\n                    i.classList.add(classOff);\r\n                }\r\n                onchange(checked);\r\n            }\r\n            return i;\r\n        }\r\n    }\r\n}",null,"module Tesp {\r\n    export class Feature {\r\n        name: string;\r\n        verb: string;\r\n        location: string;\r\n        type: string;\r\n        icon: string;\r\n        disabled: boolean;\r\n        hidden: boolean;\r\n        visualOnly: boolean;\r\n    }\r\n    export interface IFeatureList extends Array<Feature> {\r\n        byName: { [key: string]: Feature };\r\n    }\r\n\r\n    export class Features {\r\n        static init(): IFeatureList {\r\n            var features = <IFeatureList>[\r\n                { name: \"Mark/Recall\", verb: \"Recall\", type: \"mark\", icon: \"bolt\" },\r\n                { name: \"Mages Guild\", verb: \"Guild Guide\", type: \"mages-guild\", icon: \"eye\" },\r\n                { name: \"Silt Strider\", verb: \"Silt Strider\", type: \"silt-strider\", icon: \"bug\" },\r\n                { name: \"Boat\", location: \"Docks\", type: \"boat\", icon: \"ship\" },\r\n                { name: \"Holamayan Boat\", location: \"Docks\", verb: \"Boat\", type: \"holamayan\", icon: \"ship\" },\r\n                { name: \"Propylon Chamber\", type: \"propylon\", icon: \"cog\" },\r\n                { name: \"Gondola\", type: \"gondola\", icon: \"ship\" },\r\n                { name: \"Divine Intervention\", location: \"Imperial Cult Shrine\", type: \"divine\", icon: \"bolt\" },\r\n                { name: \"Almsivi Intervention\", location: \"Tribunal Temple\", type: \"almsivi\", icon: \"bolt\" },\r\n                { name: \"Transport lines\", type: \"transport-edge\", visualOnly: true },\r\n                { name: \"Locations\", type: \"node\", visualOnly: true },\r\n                { name: \"Intervention area border\", type: \"area\", visualOnly: true },\r\n                { name: \"Gridlines\", type: \"grid\", visualOnly: true }\r\n            ];\r\n            features.byName = {};\r\n            var fIdx = features.byName;\r\n            features.forEach(f => fIdx[f.type] = f);\r\n            fIdx[\"transport-edge\"].hidden = fIdx[\"area\"].hidden = fIdx[\"grid\"].hidden = true;\r\n            return features;\r\n        }\r\n    }\r\n}","module Tesp {\r\n    /** The map UI */\r\n    export class Map {\r\n        private edgeContainer: HTMLElement;\r\n        private nodeContainer: HTMLElement;\r\n        private areaContainer: HTMLElement;\r\n        private pathContainer: HTMLElement;\r\n        private gridContainer: HTMLElement;\r\n        private sourceElem: HTMLElement;\r\n        private destElem: HTMLElement;\r\n        private markElem: HTMLElement;\r\n\r\n        constructor(private app: Application, private element: HTMLElement) {\r\n            this.app.addChangeListener(ChangeReason.SourceChange, () => this.renderSource());\r\n            this.app.addChangeListener(ChangeReason.DestinationChange, () => this.renderDestination());\r\n            this.app.addChangeListener(ChangeReason.MarkChange, () => this.renderMark());\r\n            this.app.addChangeListener(ChangeReason.PathUpdate, () => this.renderPath());\r\n            this.app.addChangeListener(ChangeReason.FeatureChange, () => this.updateFeatures());\r\n\r\n            element.onclick = ev => {\r\n                var node = this.getEventNode(ev);\r\n                if (node != null) {\r\n                    this.triggerContextMenu(ev, node);\r\n                }\r\n            };\r\n\r\n            element.oncontextmenu = ev => {\r\n                if (!ev.shiftKey) {\r\n                    ev.preventDefault();\r\n                    ev.stopPropagation();\r\n                    this.triggerContextMenu(ev);\r\n                }\r\n            }\r\n\r\n            this.renderNodes();\r\n            this.renderPath();\r\n            this.renderMark();\r\n            this.renderGrid();\r\n            this.updateFeatures();\r\n            this.initDragScroll();\r\n        }\r\n\r\n        private getEventNode(event: MouseEvent) {\r\n            var target = <HTMLElement>event.target;\r\n            if (target.classList.contains(\"map-node\")) {\r\n                var id = target.dataset[\"nodeId\"];\r\n                if (id !== undefined) {\r\n                    return this.app.world.findNodeById(+id);\r\n                }\r\n            }\r\n            return null;\r\n        }\r\n\r\n        private triggerContextMenu(ev: MouseEvent, node?: Node) {\r\n            this.app.ctxMenu.open(new Vec2(ev.pageX, ev.pageY), node || this.getEventNode(ev));\r\n        }\r\n\r\n        private initDragScroll() {\r\n            var img = <HTMLElement>this.element.querySelector(\"img\");\r\n            var mousedown = false, prevX: number, prevY: number;\r\n            var stop = (ev: MouseEvent) => {\r\n                mousedown = false;\r\n                this.app.toggleBodyClass(\"scrolling\", false);\r\n                ev.preventDefault();\r\n            };\r\n            var start = (ev: MouseEvent) => {\r\n                mousedown = true;\r\n                prevX = ev.clientX;\r\n                prevY = ev.clientY;\r\n                this.app.toggleBodyClass(\"scrolling\", true);\r\n                ev.preventDefault();\r\n            }\r\n            img.onmousedown = ev => {\r\n                if (ev.button === 0 && ev.target === img) {\r\n                    start(ev);\r\n                }\r\n            };\r\n            img.onmouseup = ev => {\r\n                if (mousedown) {\r\n                    stop(ev);\r\n                }\r\n            }\r\n            img.onmousemove = ev => {\r\n                if (!mousedown && ev.which === 1) {\r\n                    start(ev);\r\n                }\r\n                if (mousedown) {\r\n                    if (ev.which !== 1) {\r\n                        stop(ev);\r\n                    } else {\r\n                        scroll(pageXOffset + prevX - ev.clientX, pageYOffset + prevY - ev.clientY);\r\n                        prevX = ev.clientX;\r\n                        prevY = ev.clientY;\r\n                        ev.preventDefault();\r\n                    }\r\n                }\r\n            };\r\n        }\r\n\r\n        private renderNodes() {\r\n            if (this.nodeContainer != null)\r\n                this.nodeContainer.parentElement.removeChild(this.nodeContainer);\r\n            this.nodeContainer = document.createElement(\"div\");\r\n            this.element.appendChild(this.nodeContainer);\r\n            this.app.world.nodes\r\n                //.concat(this.app.world.landmarks.map(l => l.target))\r\n                .forEach(n => this.nodeContainer.appendChild(this.drawNode(n)));\r\n\r\n            if (this.edgeContainer != null)\r\n                this.edgeContainer.parentElement.removeChild(this.edgeContainer);\r\n            this.edgeContainer = document.createElement(\"div\");\r\n            this.element.appendChild(this.edgeContainer);\r\n            this.app.world.edges.forEach(e =>\r\n                this.edgeContainer.appendChild(this.drawEdge(e.srcNode.pos, e.destNode.pos, e.srcNode.type, \"map-transport-edge\")));\r\n\r\n            if (this.areaContainer != null)\r\n                this.areaContainer.parentElement.removeChild(this.areaContainer);\r\n            this.areaContainer = document.createElement(\"div\");\r\n            this.element.appendChild(this.areaContainer);\r\n            this.app.world.areas\r\n                //.concat(this.app.world.regions)\r\n                //.concat(this.app.world.landmarks)\r\n                .forEach(a => {\r\n                    var type = a.target.type;\r\n                    var prev: CellRow = null;\r\n                    for (var i = 0; i < a.rows.length; i++) {\r\n                        var row = a.rows[i];\r\n                        if (prev != null) {\r\n                            if (row.x1 !== prev.x1) {\r\n                                this.areaContainer.appendChild(this.drawCellEdge(row.x1, row.y, prev.x1, row.y, type));\r\n                            }\r\n                            if (row.x2 !== prev.x2) {\r\n                                this.areaContainer.appendChild(this.drawCellEdge(row.x2 + 1, row.y, prev.x2 + 1, row.y, type));\r\n                            }\r\n                        } else {\r\n                            this.areaContainer.appendChild(this.drawCellEdge(row.x1, row.y, row.x2 + 1, row.y, type));\r\n                        }\r\n                        this.areaContainer.appendChild(this.drawCellEdge(row.x1, row.y, row.x1, row.y + 1, type));\r\n                        this.areaContainer.appendChild(this.drawCellEdge(row.x2 + 1, row.y, row.x2 + 1, row.y + 1, type));\r\n                        prev = row;\r\n                    }\r\n                    if(prev != null)\r\n                        this.areaContainer.appendChild(this.drawCellEdge(prev.x1, prev.y + 1, prev.x2 + 1, prev.y + 1, type));\r\n                });\r\n        }\r\n\r\n        private drawCellEdge(x1: number, y1: number, x2: number, y2: number, type: string) {\r\n            return this.drawEdge(Vec2.fromCell(x1, y1), Vec2.fromCell(x2, y2), type, \"map-area\");\r\n        }\r\n\r\n        private renderPath() {\r\n            if (this.pathContainer != null)\r\n                this.pathContainer.parentElement.removeChild(this.pathContainer);\r\n\r\n            var pathNode: PathNode = this.app.context.pathEnd;\r\n            if (pathNode == null) {\r\n                this.pathContainer = null;\r\n                return;\r\n            }\r\n\r\n            this.pathContainer = document.createElement(\"div\");\r\n            this.element.appendChild(this.pathContainer);\r\n            while (pathNode && pathNode.prev) {\r\n                this.pathContainer.appendChild(this.drawEdge(pathNode.node.pos, pathNode.prev.node.pos, \"path\", \"map-\" + pathNode.prevEdge.type));\r\n                pathNode = pathNode.prev;\r\n            }\r\n        }\r\n\r\n        private renderMark() {\r\n            this.markElem = this.addOrUpdateNodeElem(this.app.context.markNode, this.markElem);\r\n        }\r\n        private renderSource() {\r\n            this.sourceElem = this.addOrUpdateNodeElem(this.app.context.sourceNode, this.sourceElem);\r\n        }\r\n        private renderDestination() {\r\n            this.destElem = this.addOrUpdateNodeElem(this.app.context.destNode, this.destElem);\r\n        }\r\n\r\n        private addOrUpdateNodeElem(node: Node, elem: HTMLElement): HTMLElement {\r\n            if (elem)\r\n                elem.parentElement.removeChild(elem);\r\n            return node != null\r\n                ? <HTMLElement>this.element.appendChild(this.drawNode(node))\r\n                : null;\r\n        }\r\n\r\n        private renderGrid() {\r\n            if (!this.gridContainer) {\r\n                this.gridContainer = document.createElement(\"div\");\r\n                this.element.appendChild(this.gridContainer);\r\n                var i: number, el: HTMLDivElement;\r\n                for (i = 0; i < 37; i++) {\r\n                    el = document.createElement(\"div\");\r\n                    el.classList.add(\"map-grid\");\r\n                    el.classList.add(\"map-grid-v\");\r\n                    el.style.left = (i * Cell.width + Cell.widthOffset) + \"px\";\r\n                    this.gridContainer.appendChild(el);\r\n                }\r\n                for (i = 0; i < 42; i++) {\r\n                    el = document.createElement(\"div\");\r\n                    el.classList.add(\"map-grid\");\r\n                    el.classList.add(\"map-grid-h\");\r\n                    el.style.top = (i * Cell.height + Cell.heightOffset) + \"px\";\r\n                    this.gridContainer.appendChild(el);\r\n                }\r\n\r\n                // show grid coordinates\r\n                /*for (i = 0; i < 37; i++) {\r\n                    for (var j = 0; j < 42; j++) {\r\n                        var el = document.createElement('div');\r\n                        el.textContent = i + ',' + j;\r\n                        el.style.position = \"absolute\";\r\n                        el.style.color = \"rgba(255,255,255,0.75)\";\r\n                        el.style.left = (i * 44.5 + 22) + \"px\";\r\n                        el.style.top = (j * 44.6 + 37) + \"px\";\r\n                        el.style.zIndex = \"10\";\r\n                        el.style.font = \"7pt sans-serif\";\r\n                        this.gridContainer.appendChild(el);\r\n                    }\r\n                }*/\r\n            }\r\n        }\r\n\r\n        private updateFeatures() {\r\n            this.element.className = \"\";\r\n            this.app.features.forEach(f => {\r\n                if (f.hidden)\r\n                    this.element.classList.add(\"hide-\" + f.type);\r\n            });\r\n        }\r\n\r\n        private drawNode(node: Node): HTMLElement  {\r\n            var element = document.createElement(\"div\");\r\n            element.classList.add(\"map-node\");\r\n            element.classList.add(\"map-\" + node.type);\r\n            element.style.left = node.pos.x + \"px\";\r\n            element.style.top = node.pos.y + \"px\";\r\n            element.dataset[\"nodeId\"] = (node.referenceId || node.id) + \"\";\r\n            return element;\r\n        }\r\n\r\n        private drawEdge(n1: Vec2, n2: Vec2, type: string, subtype?: string): HTMLElement {\r\n            var element = document.createElement(\"div\");\r\n            element.classList.add(\"map-edge\");\r\n            element.classList.add(\"map-\" + type);\r\n            if (subtype)\r\n                element.classList.add(subtype);\r\n            var length = n1.distance(n2);\r\n            element.style.left = ((n1.x + n2.x) / 2) - (length / 2) + \"px\";\r\n            element.style.top = ((n1.y + n2.y) / 2) - 1 + \"px\";\r\n            element.style.width = length + \"px\";\r\n            element.style.transform = `rotate(${Math.atan2(n1.y - n2.y, n1.x - n2.x)}rad)`;\r\n            return element;\r\n        }\r\n    }\r\n}","module Tesp {\r\n    export class MenuItem {\r\n        static separator = new MenuItem(\"\");\r\n\r\n        constructor(public label: string, public func?: () => void) { }\r\n    }\r\n    export class Menu {\r\n        element: HTMLElement;\r\n\r\n        private listener: ChangeListener;\r\n        private disposed = false;\r\n\r\n        constructor(private app: Application, fixed: boolean) {\r\n            this.listener = this.app.addChangeListener(ChangeReason.ClearMenus, () => this.hide());\r\n            this.element = document.createElement(\"ul\");\r\n            this.element.className = \"menu\";\r\n            if (fixed)\r\n                this.element.classList.add(\"fixed\");\r\n            this.element.onmousedown = ev => ev.stopPropagation();\r\n            this.app.element.appendChild(this.element);\r\n        }\r\n        dispose() {\r\n            if (this.disposed) return;\r\n            this.app.removeChangeListener(this.listener);\r\n            this.element.parentElement.removeChild(this.element);\r\n            this.disposed = true;\r\n        }\r\n\r\n        getStyle(): CSSStyleDeclaration {\r\n            return this.disposed ? null : this.element.style;\r\n        }\r\n\r\n        setData(items: MenuItem[]) {\r\n            if (this.disposed) return;\r\n\r\n            this.hide();\r\n            var child: Element;\r\n            while ((child = this.element.firstElementChild) != null) {\r\n                this.element.removeChild(child);\r\n            }\r\n\r\n            items.forEach(item => {\r\n                var li = document.createElement(\"li\");\r\n                this.element.appendChild(li);\r\n                if (item === MenuItem.separator) {\r\n                    li.className = \"separator\";\r\n                } else {\r\n                    li.textContent = item.label;\r\n                    if (item.func != null) {\r\n                        li.className = \"link\";\r\n                        li.onmousedown = ev => {\r\n                            ev.stopPropagation();\r\n                            item.func();\r\n                            this.hide();\r\n                        };\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n        open() {\r\n            if (this.disposed) return;\r\n            this.app.triggerChange(ChangeReason.ClearMenus);\r\n            if(this.element.firstElementChild != null)\r\n                this.element.style.display = \"inherit\";\r\n        }\r\n        hide() {\r\n            if (this.disposed) return;\r\n            this.element.style.display = \"none\";\r\n        }\r\n    }\r\n}","module Tesp {\r\n    export class PathEdge {\r\n        constructor(public target: PathNode, public cost: number, public type: string) { }\r\n    }\r\n    export class PathNode {\r\n        dist: number;\r\n        prev: PathNode;\r\n        prevEdge: PathEdge;\r\n        edges: PathEdge[];\r\n\r\n        constructor(public node: Node) {\r\n            this.dist = Infinity;\r\n        }\r\n    }\r\n\r\n    export class Path {\r\n        private static spellCost: number = 5;\r\n\r\n        static findPath(app: Application) {\r\n            var world = app.world;\r\n            var context = app.context;\r\n\r\n            // create nodes\r\n            var nodeMap: { [key: number]: PathNode } = {};\r\n            var feats = app.features.byName;\r\n            var nodes: PathNode[] = world.nodes\r\n                .filter(n => !feats[n.type].disabled && n !== context.sourceNode && n !== context.destNode)\r\n                .map(n => nodeMap[n.id] = new PathNode(n));\r\n\r\n            var source = new PathNode(context.sourceNode);\r\n            source.dist = 0;\r\n            nodes.push(source);\r\n            nodeMap[context.sourceNode.id] = source;\r\n\r\n            var dest = new PathNode(context.destNode);\r\n            nodes.push(dest);\r\n            nodeMap[context.destNode.id] = dest;\r\n\r\n            var maxCost = context.sourceNode.pos.distance(context.destNode.pos);\r\n\r\n            // explicit edges (services)\r\n            nodes.forEach(n =>\r\n                n.edges = n.node.edges\r\n                    .filter(e => !feats[e.destNode.type].disabled)\r\n                    .map(e => new PathEdge(nodeMap[(e.srcNode === n.node ? e.destNode : e.srcNode).id], e.cost, n.node.type)));\r\n\r\n            // implicit edges (walking)\r\n            nodes.forEach(n =>\r\n                n.edges = n.edges.concat(nodes\r\n                    .filter(n2 => n2 !== n && !n.edges.some(e => e.target === n2))\r\n                    .map(n2 => new PathEdge(n2, n.node.pos.distance(n2.node.pos), \"walk\"))\r\n                    .filter(e => e.cost <= maxCost)));\r\n\r\n            // mark\r\n            if (context.markNode != null && !feats[\"mark\"].disabled) {\r\n                var mn = new PathNode(context.markNode);\r\n                mn.edges = nodes.filter(n => n !== source)\r\n                    .map(n => new PathEdge(n, mn.node.pos.distance(n.node.pos), \"walk\"))\r\n                    .filter(e => e.cost < maxCost);\r\n                source.edges.push(new PathEdge(mn, Path.spellCost, \"mark\"));\r\n                nodes.push(mn);\r\n            }\r\n\r\n            // intervention\r\n            nodes.forEach(n => {\r\n                var cell = Cell.fromPosition(n.node.pos);\r\n                world.areas.forEach(a => {\r\n                    if (!feats[a.target.type].disabled) {\r\n                        if (a.containsCell(cell)) {\r\n                            // node inside area, teleport to temple/shrine\r\n                            n.edges.push(new PathEdge(nodeMap[a.target.id], Path.spellCost, a.target.type));\r\n                        } else {\r\n                            // node outside area, walk to edge\r\n                            var dist: number = Infinity;\r\n                            var closest: Vec2;\r\n                            a.rows.forEach(r => {\r\n                                // v is closest point (in cell units) from node to row\r\n                                var v = new Vec2(\r\n                                    Math.max(Math.min(cell.x, r.x1 + r.width), r.x1),\r\n                                    Math.max(Math.min(cell.y, r.y + 1), r.y));\r\n                                var alt = cell.distance(v);\r\n                                if (alt < dist) {\r\n                                    dist = alt;\r\n                                    closest = v;\r\n                                }\r\n                            });\r\n                            var pos = Vec2.fromCell(closest.x, closest.y);\r\n                            var cost = n.node.pos.distance(pos);\r\n                            if (cost < maxCost) {\r\n                                // new node to allow us to teleport once we're in the area\r\n                                var feat = app.features.byName[a.target.type];\r\n                                var name = `${feat.name} range of ${a.target.name}`;\r\n                                var an = new PathNode(new Node(name, name, pos, \"area\"));\r\n                                an.edges = [new PathEdge(nodeMap[a.target.id], Path.spellCost, a.target.type)];\r\n                                nodes.push(an);\r\n                                n.edges.push(new PathEdge(an, cost, \"walk\"));\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n            });\r\n\r\n            var q: PathNode[] = nodes.slice();\r\n\r\n            while (q.length > 0) {\r\n                q.sort((a, b) => b.dist - a.dist);\r\n                var u = q.pop();\r\n\r\n                for (var i = 0; i < u.edges.length; i++) {\r\n                    var e = u.edges[i];\r\n                    var v = e.target;\r\n                    var alt = u.dist + e.cost;\r\n                    if (alt < v.dist) {\r\n                        v.dist = alt;\r\n                        v.prev = u;\r\n                        v.prevEdge = e;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return dest;\r\n        }\r\n    }\r\n}","module Tesp {\r\n    export type TransportSource = { [key: string]: INodeSource[] };\r\n    export interface IWorldSource {\r\n        transport: TransportSource;\r\n        regions: INodeSource[];\r\n        landmarks: INodeSource[];\r\n    }\r\n    export interface INodeSource {\r\n        name: string;\r\n        x: number;\r\n        y: number;\r\n        edges: number[];\r\n        oneWayEdges: number[];\r\n        top: number;\r\n        cells: number[][];\r\n    }\r\n\r\n    /** Static assets and locations */\r\n    export class World {\r\n        nodes: Node[];\r\n        edges: Edge[];\r\n        areas: Area[];\r\n        regions: Area[];\r\n        landmarks: Area[];\r\n\r\n        private nodesById: { [key: number]: Node } = {};\r\n        private static transportCost: number = 10;\r\n\r\n        constructor(private app: Application, data: IWorldSource) {\r\n            this.nodes = [];\r\n            this.edges = [];\r\n            this.areas = [];\r\n\r\n            Object.getOwnPropertyNames(data.transport).forEach(k => this.loadTransport(data.transport, k));\r\n            this.regions = data.regions.map(a => World.makeArea(new Node(a.name, a.name, new Vec2(0, 0), \"region\"), a));\r\n            this.landmarks = data.landmarks.map(a => {\r\n                var node = new Node(a.name, a.name, new Vec2(0, 0), \"landmark\");\r\n                var area = World.makeArea(node, a);\r\n                // set node location to average center point of all cells\r\n                var sumX: number = 0;\r\n                var sumY: number = 0;\r\n                var count: number = 0;\r\n                area.rows.forEach(r => {\r\n                    sumX += (r.x1 + r.width / 2) * r.width;\r\n                    sumY += (r.y + 0.5) * r.width;\r\n                    count += r.width;\r\n                });\r\n                node.pos = Vec2.fromCell(sumX / count, sumY / count);\r\n                return area;\r\n            });\r\n\r\n            // index by id\r\n            this.nodesById = {};\r\n            this.nodes.forEach(n => this.nodesById[n.id] = n);\r\n        }\r\n\r\n        loadTransport(data: TransportSource, type: string) {\r\n            var array: INodeSource[] = data[type];\r\n            var feat = this.app.features.byName[type];\r\n            var typeName = feat.location || feat.name;\r\n            var nodes: Node[] = array.map(n => new Node(n.name, `${typeName}, ${n.name}`, new Vec2(n.x, n.y), type, true));\r\n            this.nodes = this.nodes.concat(nodes);\r\n            var cost = World.transportCost;\r\n            array.forEach((n, i1) => {\r\n                var n1 = nodes[i1];\r\n                if (n.edges) {\r\n                    n.edges.forEach(i2 => {\r\n                        var n2 = nodes[i2];\r\n                        var edge = new Edge(n1, n2, cost);\r\n                        n1.edges.push(edge);\r\n                        n2.edges.push(edge);\r\n                        this.edges.push(edge);\r\n                    });\r\n                }\r\n                if (n.oneWayEdges) {\r\n                    n.oneWayEdges.forEach(i2 => {\r\n                        var edge = new Edge(n1, nodes[i2], cost);\r\n                        n1.edges.push(edge);\r\n                        this.edges.push(edge);\r\n                    });\r\n                }\r\n                if (n.cells) {\r\n                    this.areas.push(World.makeArea(n1, n));\r\n                }\r\n            });\r\n        }\r\n\r\n        private static makeArea(node: Node, data: INodeSource) {\r\n            var y = data.top || 0;\r\n            var rows = data.cells.map(c => new CellRow(y++, c[0], c[1]));\r\n            return new Area(node, rows);\r\n        }\r\n\r\n        findNodeById(id: number): Node {\r\n            return this.nodesById[id] || null;\r\n        }\r\n\r\n        getRegionName(pos: Vec2): string {\r\n            var area = World.getAreaByCell(this.regions, Cell.fromPosition(pos));\r\n            return area != null ? area.target.name : null;\r\n        }\r\n        getLandmarkName(pos: Vec2): string {\r\n            var area = World.getAreaByCell(this.landmarks, Cell.fromPosition(pos));\r\n            return area != null ? area.target.name : null;\r\n        }\r\n        private static getAreaByCell(source: Area[], cell: Vec2): Area {\r\n            var area: Area;\r\n            if (source.some(r => r.containsCell(cell) && (area = r) != null))\r\n                return area;\r\n            return null;\r\n        }\r\n    }\r\n}"],"sourceRoot":"."}